<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.xihrni.com</id>
    <title>我的世界</title>
    <updated>2020-06-17T02:29:16.329Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.xihrni.com"/>
    <link rel="self" href="https://www.xihrni.com/atom.xml"/>
    <subtitle>君子和而不同。穷则独善其身，达则兼济天下。</subtitle>
    <logo>https://www.xihrni.com/images/avatar.png</logo>
    <icon>https://www.xihrni.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 我的世界</rights>
    <entry>
        <title type="html"><![CDATA[MySQL 条件批量更新与插入（PHP实现）]]></title>
        <id>https://www.xihrni.com/post/mysql-tiao-jian-pi-liang-geng-xin-yu-cha-ru-php-shi-xian/</id>
        <link href="https://www.xihrni.com/post/mysql-tiao-jian-pi-liang-geng-xin-yu-cha-ru-php-shi-xian/">
        </link>
        <updated>2020-06-17T01:54:38.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>😳有个接口需要同时修改关联数据，但是传过来的关联数据包含原本的数据（更新）和新的数据（插入），为了区分则让前端将原来的数据必须传ID，看看如何在一个接口中实现更新和插入操作</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>😳有个接口需要同时修改关联数据，但是传过来的关联数据包含原本的数据（更新）和新的数据（插入），为了区分则让前端将原来的数据必须传ID，看看如何在一个接口中实现更新和插入操作</p>
</blockquote>
<!-- more -->
<h3 id="接口需求">接口需求</h3>
<p>请求地址</p>
<pre><code class="language-text">POST {{domain}}/v1/user/api-envs/:id
</code></pre>
<p>请求数据</p>
<pre><code class="language-json">{
	&quot;title&quot;: &quot;环境变量组1&quot;,
	&quot;variables&quot;: [
		{
			&quot;id&quot;: 1,
			&quot;name&quot;: &quot;admin_token1&quot;,
			&quot;value&quot;: &quot;123456&quot;
		},
		{
			&quot;name&quot;: &quot;user_token&quot;,
			&quot;value&quot;: &quot;456789&quot;
		},
		{
			&quot;id&quot;: 2,
			&quot;name&quot;: &quot;admin_token2&quot;,
			&quot;value&quot;: &quot;1234567&quot;
		},
		{
			&quot;id&quot;: 4,
			&quot;name&quot;: &quot;admin_token4&quot;,
			&quot;value&quot;: &quot;1234568&quot;
		},
		{
			&quot;name&quot;: &quot;user_token2&quot;,
			&quot;value&quot;: &quot;4567890&quot;
		}
	]
}
</code></pre>
<p>数据库表结构<br>
<code>api_env</code> 环境</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:right">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">int(11) unsigned</td>
<td style="text-align:right">ID</td>
</tr>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">varchar(32)</td>
<td style="text-align:right">标题</td>
</tr>
<tr>
<td style="text-align:left">created_at</td>
<td style="text-align:left">timestamp</td>
<td style="text-align:right">创建时间</td>
</tr>
</tbody>
</table>
<p><code>api_env_variable</code> 环境变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:right">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">int(11) unsigned</td>
<td style="text-align:right">ID</td>
</tr>
<tr>
<td style="text-align:left">env_id</td>
<td style="text-align:left">int(11) unsigned</td>
<td style="text-align:right">环境ID</td>
</tr>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">varchar(32)</td>
<td style="text-align:right">名称</td>
</tr>
<tr>
<td style="text-align:left">value</td>
<td style="text-align:left">varchar(255)</td>
<td style="text-align:right">值</td>
</tr>
<tr>
<td style="text-align:left">created_at</td>
<td style="text-align:left">timestamp</td>
<td style="text-align:right">创建时间</td>
</tr>
</tbody>
</table>
<h3 id="mysql-条件批量更新语句">MySQL 条件批量更新语句</h3>
<pre><code class="language-sql">UPDATE `api_env_variable`
SET `name` = CASE `id`
    WHEN 1 THEN 'admin_token1' 
    WHEN 2 THEN 'admin_token2'
    WHEN 4 THEN 'admin_token4'
END
WHERE `id` IN (1,2,4)
</code></pre>
<p>后面的条件 <code>id</code> 用于提升效率，还可加 <code>AND</code> 条件筛选</p>
<h3 id="php-实现">PHP 实现</h3>
<p>使用 Yii2 框架进行示例：</p>
<pre><code class="language-php">$data = Yii::$app-&gt;request-&gt;post();

// 更新环境数据
// ... 

// 更新和插入环境变量数据
if ($data['variables']) {
    $updateData = []; // 需要更新的数据
    $insertData = []; // 需要插入的数据
    foreach ($data['variables'] as $v) {
        // 过滤数据
        if ($v['name'] &amp;&amp; $v['value']) {
            // 判断是插入还是更新
            $v['id'] ? $updateData[] = $v : $insertData[] = $v;
        }
    }

    // 开启事务
    $result = Yii::$app-&gt;db-&gt;transaction(function ($e) use ($id, $updateData, $insertData) {
        $table = ApiEnvVariable::tableName();

        // 更新
        if ($updateData) {
            $ids = $name = $value = '';
            foreach ($updateData as $v) {
                $ids   .= $v['id'] . ',';
                $name  .= &quot; WHEN ${v['id']} THEN '${v['name']}'&quot;;
                $value .= &quot; WHEN ${v['id']} THEN '${v['value']}'&quot;;
            }

            $ids = rtrim($ids, ',');
            $sql = &quot;UPDATE ${table} SET name = CASE id ${name} END, value = CASE id ${value} END WHERE id IN (${ids}) AND is_trash = 0&quot;;

            try {
                $result = Yii::$app-&gt;db-&gt;createCommand($sql)-&gt;execute();
                // var_dump($result);
            } catch (Exception $e) {
                // var_dump($e-&gt;getMessage());
                throw new ServerErrorHttpException(Yii::t('app/error', 'Update failed.'));
                $e-&gt;transaction-&gt;rollBack();
            }
        }

        // 插入
        if ($insertData) {
            $insertData = array_map(function ($v) use ($id) {
                return [
                    'env_id' =&gt; $id,
                    'name'   =&gt; $v['name'],
                    'value'  =&gt; $v['value'],
                ];
            }, $insertData);

            return Yii::$app-&gt;db-&gt;createCommand()
                -&gt;batchInsert($table, ['env_id', 'name', 'value'], $insertData)
                -&gt;execute();
        }

        // $e-&gt;transaction-&gt;commit(); // 无错误或异常执行完自动提交事务
        return true;
    });

    // 验证返回
    // ...
}
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Yii2 自定义组件配置 PhpStorm 编辑器代码提示]]></title>
        <id>https://www.xihrni.com/post/yii2-zi-ding-yi-zu-jian-pei-zhi-phpstorm-bian-ji-qi-dai-ma-ti-shi/</id>
        <link href="https://www.xihrni.com/post/yii2-zi-ding-yi-zu-jian-pei-zhi-phpstorm-bian-ji-qi-dai-ma-ti-shi/">
        </link>
        <updated>2020-06-05T01:34:03.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="自定义组件配置">😳自定义组件配置</h3>
<p>在 <code>web.php</code> 的组件配置中添加了一个自定义用户组件</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="自定义组件配置">😳自定义组件配置</h3>
<p>在 <code>web.php</code> 的组件配置中添加了一个自定义用户组件</p>
<!-- more -->
<pre><code class="language-php">&lt;?php

$config = [
    ...
    'components' =&gt; [
        ...
        'admin' =&gt; [
            'class' =&gt; 'yii\web\User',
            'identityClass' =&gt; 'app\models\Admin',
            'enableAutoLogin' =&gt; true,
            'enableSession' =&gt; false,
            'loginUrl' =&gt; null,
        ],
        ...
    ],
    ...
]

...

return $config;
</code></pre>
<p>当在使用的时候 PhpStorm 编辑器则会提示“Property accessed via magic method”信息，并且无法关联类也无法进行自动提示代码补全</p>
<figure data-type="image" tabindex="1"><img src="https://www.xihrni.com/post-images/1591321895158.png" alt="提示“Property accessed via magic method”信息" loading="lazy"></figure>
<h3 id="创建声明类文件">创建声明类文件</h3>
<p>给 IDE 一些提示的最好方法是使用自己的 Yii 文件，运行代码时它实际上并不使用。这个文件可以命名为 <code>Yii.php</code> ，在项目根目录创建。其内容如下：</p>
<pre><code class="language-php">&lt;?php

use app\models\Admin;

/**
 * Yii bootstrap file.
 * Used for enhanced IDE code autocompletion.
 */
class Yii extends \yii\BaseYii
{
    /**
     * @var BaseApplication|WebApplication|ConsoleApplication the application instance
     */
    public static $app;
}

/**
 * Class BaseApplication
 * Used for properties that are identical for both WebApplication and ConsoleApplication
 *
// * @property \app\components\RbacManager $authManager The auth manager for this application. Null is returned if auth manager is not configured. This property is read-only. Extended component.
// * @property \app\components\Mailer $mailer The mailer component. This property is read-only. Extended component.
 */
abstract class BaseApplication extends yii\base\Application
{
}

/**
 * Class WebApplication
 * Include only Web application related components here
 *
 * @property Admin $admin The user component. This property is read-only. Extended component.
// * @property \app\components\User $user The user component. This property is read-only. Extended component.
// * @property \app\components\MyResponse $response The response component. This property is read-only. Extended component.
// * @property \app\components\ErrorHandler $errorHandler The error handler application component. This property is read-only. Extended component.
 */
class WebApplication extends yii\web\Application
{
}

/**
 * Class ConsoleApplication
 * Include only Console application related components here
 *
// * @property \app\components\ConsoleUser $user The user component. This property is read-only. Extended component.
 */
class ConsoleApplication extends yii\console\Application
{
}
</code></pre>
<blockquote>
<p><code>BaseApplication</code> 表示包含所有环境下的 Yii 类<br>
<code>WebApplication</code> 表示 Web 环境下的 Yii 类<br>
<code>ConsoleApplication</code> 表示 Cli 环境下的 Yii 类</p>
</blockquote>
<p>由于已经有一个 Yii 的类了，所以 PhpStorm 编辑器会提示“Multiple Implementations”，我们需要将 <code>vendor/yiisoft/yii2/Yii.php</code> 文件标记为纯文本</p>
<figure data-type="image" tabindex="2"><img src="https://www.xihrni.com/post-images/1591322367077.png" alt="将  文件标记为纯文本" loading="lazy"></figure>
<p>可以看到我们在给每个对应的类添加了 @property 文档注释，之后再去实际业务代码中会发现已经不会提示“Property accessed via magic method”信息了并且能像正常的类关联和自动提示代码补全</p>
<figure data-type="image" tabindex="3"><img src="https://www.xihrni.com/post-images/1591322835443.png" alt="正常的类关联和自动提示代码补全" loading="lazy"></figure>
<h3 id="忽略版本控制">忽略版本控制</h3>
<p>可以将自定义的 <code>Yii.php</code> 加入到 <code>.gitignore</code> 忽略文件中提交到代码版本进行推送到线上协作，也可以加入到本地全局忽略文件不进行提交</p>
<blockquote>
<p>如果已有全局忽略文件则直接在文件中追加 <code>/Yii.php</code> 字符串即可</p>
</blockquote>
<pre><code class="language-shell">&gt; git config --global core.excludesfile ~/.gitignore_global
# 如果没有 `.gitignore_global` 文件则进行创建
&gt; echo '/Yii.php' &gt; .gitignore_global
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 从远程拉取数据时提示：'You have not concluded your merge (MERGE_HEAD exists).' 解决方法]]></title>
        <id>https://www.xihrni.com/post/git-cong-yuan-cheng-la-qu-shu-ju-shi-ti-shi-you-have-not-concluded-your-merge-merge_head-exists/</id>
        <link href="https://www.xihrni.com/post/git-cong-yuan-cheng-la-qu-shu-ju-shi-ti-shi-you-have-not-concluded-your-merge-merge_head-exists/">
        </link>
        <updated>2020-06-02T03:07:51.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="当前状态">😳当前状态</h3>
<p>有些代码未加到忽略文件然后系统运行中被修改之后如果未处理进行拉取，在操作的过程中可能出现了如下状态</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="当前状态">😳当前状态</h3>
<p>有些代码未加到忽略文件然后系统运行中被修改之后如果未处理进行拉取，在操作的过程中可能出现了如下状态</p>
<!-- more -->
<pre><code class="language-shell">&gt; git status
# On branch develop
# Your branch and 'origin/develop' have diverged,
# and have 9 and 7 different commits each, respectively.
#   (use &quot;git pull&quot; to merge the remote branch into yours)
#
# All conflicts fixed but you are still merging.
#   (use &quot;git commit&quot; to conclude merge)
#
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   config/site_config.php
#       modified:   sitemap_article.xml
#       modified:   sitemap_goods.xml
#       modified:   sitemaps.xml
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>这个时候可以先备份修改过的文件，然后重置到修改之前的状态再拉取试试</p>
<pre><code class="language-shell">&gt; git checkout -- config/site_config.php
&gt; git checkout -- sitemap_article.xml
&gt; git checkout -- sitemap_goods.xml
&gt; git checkout -- sitemap.xml
&gt; git pull
</code></pre>
<p>如果提示以下信息则需要使用强制合并进行操作</p>
<pre><code class="language-shell">&gt; git pull
You have not concluded your merge (MERGE_HEAD exists).
Please, commit your changes before you can merge.
</code></pre>
<h3 id="强制合并">强制合并</h3>
<blockquote>
<p>强制合并会覆盖本地版本，请先备份相关文件</p>
</blockquote>
<pre><code class="language-shell">&gt; git fetch --all
&gt; git reset --hard origin/master
&gt; git fetch
</code></pre>
<p>再进行拉取则没有问题了</p>
<pre><code class="language-shell">&gt; git pull
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Borderlands 2 设置为繁体中文（Epic Games 平台）]]></title>
        <id>https://www.xihrni.com/post/borderlands-2-she-zhi-wei-fan-ti-zhong-wen-epic-games-ping-tai/</id>
        <link href="https://www.xihrni.com/post/borderlands-2-she-zhi-wei-fan-ti-zhong-wen-epic-games-ping-tai/">
        </link>
        <updated>2020-06-02T00:24:01.000Z</updated>
        <summary type="html"><![CDATA[<p>😳打开 Epic Games 平台先安装好游戏后进入设置界面</p>
]]></summary>
        <content type="html"><![CDATA[<p>😳打开 Epic Games 平台先安装好游戏后进入设置界面</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://www.xihrni.com/post-images/1591057609359.png" alt="Epic Games 平台设置界面" loading="lazy"></figure>
<p>滑动到最下方的管理游戏，展开 BORDERLANDS 2，勾选 <code>额外命令行参数</code> 后在输入框粘贴此字符： <code>-epiclocale=zh-Hant</code><br>
<img src="https://www.xihrni.com/post-images/1591057832534.png" alt="Epic Games 平台设置界面" loading="lazy"></p>
<p>返回到游戏库启动即可</p>
<p>启动界面还是英文不用理他，点 <code>PLAY</code> 进入游戏后就是繁体中文了<br>
<img src="https://www.xihrni.com/post-images/1591058065557.png" alt="游戏启动界面" loading="lazy"><br>
<img src="https://www.xihrni.com/post-images/1591058184453.png" alt="游戏菜单界面" loading="lazy"><br>
😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于 PHP 连接本地 localhost 上的 Redis 特别慢的处理记录]]></title>
        <id>https://www.xihrni.com/post/guan-yu-php-lian-jie-localhost-shang-de-redis-te-bie-man-de-chu-li-ji-lu/</id>
        <link href="https://www.xihrni.com/post/guan-yu-php-lian-jie-localhost-shang-de-redis-te-bie-man-de-chu-li-ji-lu/">
        </link>
        <updated>2020-05-28T05:43:58.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>😳 本地的 Yii2 项目配置 Redis 缓存后接口速度非常慢，检查了一下后发现每次都是在连接 Redis 的时候耗时最长，一开始还以为是 Yii2 框架的扩展问题，后来用 php-cli 执行单个文件也会出现太慢的情况。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>😳 本地的 Yii2 项目配置 Redis 缓存后接口速度非常慢，检查了一下后发现每次都是在连接 Redis 的时候耗时最长，一开始还以为是 Yii2 框架的扩展问题，后来用 php-cli 执行单个文件也会出现太慢的情况。</p>
</blockquote>
<!-- more -->
<h3 id="连接-redis">连接 Redis</h3>
<p>PHP 连接 Redis 代码：</p>
<pre><code class="language-php">&lt;?php // redis.php
echo time() . &quot;\r\n&quot;;
$redis = new Redis();
$redis-&gt;connect('localhost', 6379);
echo 'Server is running: ' . $redis-&gt;ping() . &quot;\r\n&quot;;
echo time() . &quot;\r\n&quot;;
</code></pre>
<p>使用 php-cli 执行，发现时间相差2秒：</p>
<pre><code class="language-shell">PS &gt; php -f redis.php
1590629905
Server is running: +PONG
1590629907
</code></pre>
<p>但是将连接地址换成 <code>127.0.0.1</code> 之后却正常：</p>
<pre><code class="language-shell">PS &gt; php -f redis.php
1590629918
Server is running: +PONG
1590629918
</code></pre>
<h3 id="问题原因">问题原因</h3>
<p>上网查了些资料后发现 Windows 从 Win7 以后优先使用 IPv6 的协议，使 <code>localhost</code> 走了 IPv6 协议：</p>
<pre><code class="language-shell">PS &gt; hostname
G-AA00604

PS &gt; ping G-AA00604

正在 Ping G-AA00604 [fe80::5cd6:59d3:ad04:b26f%14] 具有 32 字节的数据:
来自 fe80::5cd6:59d3:ad04:b26f%14 的回复: 字节=32 时间&lt;1ms TTL=128
来自 fe80::5cd6:59d3:ad04:b26f%14 的回复: 字节=32 时间&lt;1ms TTL=128
来自 fe80::5cd6:59d3:ad04:b26f%14 的回复: 字节=32 时间&lt;1ms TTL=128
来自 fe80::5cd6:59d3:ad04:b26f%14 的回复: 字节=32 时间&lt;1ms TTL=128

fe80::5cd6:59d3:ad04:b26f%14 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 0ms，最长 = 0ms，平均 = 0ms
</code></pre>
<p>从上面的 <code>ping</code> 命令请求自己本机的主机名称，可以看到返回的是 IPv6 的地址类型，我们再来看一下网络接口的优先级：</p>
<pre><code class="language-shell">PS &gt; netsh interface ipv6 show prefixpolicies
查询活动状态...

优先顺序    标签   前缀
----------  -----  --------------------------------
        50      0  ::1/128
        40      1  ::/0
        35      4  ::ffff:0:0/96
        30      2  2002::/16
        5       5  2001::/32
        3       13  fc00::/7
        1       11  fec0::/10
        1       12  3ffe::/16
        1       3  ::/96

</code></pre>
<p>可以看到  IPv6 的地址类型在最上面，而 IPv4 的地址类型在最下面</p>
<h3 id="解决办法">解决办法</h3>
<p>既然 IPv4 的优先级较低，那么我们就改变一下优先级（使用管理员权限）</p>
<pre><code class="language-shell">PS &gt; netsh int ipv6 set prefix ::/96 50 0
确定。

PS &gt; netsh int ipv6 set prefix ::ffff:0:0/96 40 1
确定。

PS &gt; netsh int ipv6 set prefix 2002::/16 35 2
确定。

PS &gt; netsh int ipv6 set prefix 2001::/32 30 3
确定。

PS &gt; netsh int ipv6 set prefix ::1/128 10 4
确定。

PS &gt; netsh int ipv6 set prefix ::/0 5 5
确定。

PS &gt; netsh int ipv6 set prefix fc00::/7 3 13
确定。

PS &gt; netsh int ipv6 set prefix fec0::/10 1 11
确定。

PS &gt; netsh int ipv6 set prefix 3ffe::/16 1 12
确定。

</code></pre>
<p>改完之后我们再看一下网络接口的优先级：</p>
<pre><code class="language-shell">PS &gt; netsh interface ipv6 show prefixpolicies
查询活动状态...

优先顺序    标签   前缀
----------  -----  --------------------------------
        50      0  ::/96
        40      1  ::ffff:0:0/96
        35      2  2002::/16
        30      3  2001::/32
        10      4  ::1/128
         5      5  ::/0
         3     13  fc00::/7
         1     12  3ffe::/16
         1     11  fec0::/10

</code></pre>
<p>看到 IPv4 的优先级已经在最上方了，那我们再 <code>ping</code> 一下：</p>
<pre><code class="language-shell">PS &gt; ping G-AA00604

正在 Ping G-AA00604 [192.168.56.1] 具有 32 字节的数据:
来自 192.168.56.1 的回复: 字节=32 时间&lt;1ms TTL=128
来自 192.168.56.1 的回复: 字节=32 时间&lt;1ms TTL=128
来自 192.168.56.1 的回复: 字节=32 时间&lt;1ms TTL=128
来自 192.168.56.1 的回复: 字节=32 时间&lt;1ms TTL=128

192.168.56.1 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 0ms，最长 = 0ms，平均 = 0ms
</code></pre>
<p>可以看到已经反回了 IPv4 的地址类型，再试试连接 <code>localhost</code> 的 Redis：</p>
<pre><code class="language-shell">PS &gt; php -f redis.php
1590630198
Server is running: +PONG
1590630198
</code></pre>
<p>到此，已经解决了连接 <code>localhost</code> 慢的问题，其他应用也可使用此方式解决，比如：MySQL、MemCacahe 等<br>
😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacOS 已运行的 Docker 容器添加/修改端口映射]]></title>
        <id>https://www.xihrni.com/post/macos-yi-yun-xing-de-docker-rong-qi-tian-jia-xiu-gai-duan-kou-ying-she/</id>
        <link href="https://www.xihrni.com/post/macos-yi-yun-xing-de-docker-rong-qi-tian-jia-xiu-gai-duan-kou-ying-she/">
        </link>
        <updated>2020-01-01T06:24:35.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>😳当前容器名称为 <code>btPanel</code>，需要添加 <code>3306</code> 端口</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>😳当前容器名称为 <code>btPanel</code>，需要添加 <code>3306</code> 端口</p>
</blockquote>
<!-- more -->
<h3 id="确认已映射端口">确认已映射端口</h3>
<pre><code class="language-shell"># name or container id
&gt; docker port btPanel
</code></pre>
<h3 id="确认容器id">确认容器ID</h3>
<pre><code class="language-shell">&gt; docker container inspect btPanel
</code></pre>
<h3 id="停止容器">停止容器</h3>
<pre><code class="language-shell">&gt; docker stop btPanel
</code></pre>
<h3 id="登录到容器">登录到容器</h3>
<pre><code class="language-shell">&gt; screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty
</code></pre>
<h3 id="修改配置文件">修改配置文件</h3>
<p>先进入容器ID的目录</p>
<pre><code class="language-shell">&gt; cd /var/lib/docker/containers/&lt;containerId&gt;
</code></pre>
<p>修改 <code>config.v2.json</code> 文件</p>
<blockquote>
<p>被压缩的 json 格式，可复制出来用编辑器修改</p>
</blockquote>
<pre><code class="language-shell">&gt; vi config.v2.json
</code></pre>
<p>shell<br>
按照原有格式修改或新增 <code>Config.ExposedPorts</code> 块</p>
<pre><code class="language-json">{
    &quot;80/tcp&quot;: {},
    &quot;888/tcp&quot;: {},
    &quot;3306/tcp&quot;: {}
}
</code></pre>
<p>修改完后保存退出</p>
<pre><code class="language-shell">:wq
</code></pre>
<p>修改 <code>hostconfig.json</code> 文件</p>
<blockquote>
<p>被压缩的 json 格式，可复制出来用编辑器修改</p>
</blockquote>
<pre><code class="language-shell">&gt; vi config.v2.json
</code></pre>
<p>按照原有格式修改或新增 <code>PortBindings</code> 块</p>
<pre><code class="language-json">{
    &quot;80/tcp&quot;: [
        {
            &quot;HostIp&quot;: &quot;&quot;,
            &quot;HostPort&quot;: &quot;80&quot;
        }
    ],
    &quot;888/tcp&quot;: [
        {
            &quot;HostIp&quot;: &quot;&quot;,
            &quot;HostPort&quot;: &quot;888&quot;
        }
    ],
    &quot;3306/tcp&quot;: [
        {
            &quot;HostIp&quot;: &quot;&quot;,
            &quot;HostPort&quot;: &quot;3306&quot;
        }
    ]
}
</code></pre>
<p>修改完后保存退出</p>
<pre><code class="language-shell">:wq
</code></pre>
<blockquote>
<p>vi 命令模式下，<code>dd</code> 是删除当前行，<code>dG</code> 是删除当前行后面的内容</p>
</blockquote>
<h3 id="退出容器">退出容器</h3>
<p>按下 <code>Ctrl</code> + <code>A</code>，再快速按 <code>D</code>，退出 <code>screen</code></p>
<h3 id="会话">会话</h3>
<p>查看当前会话</p>
<pre><code class="language-shell">&gt; screen -ls
</code></pre>
<p>杀死会话并退出</p>
<pre><code class="language-shell">&gt; kill -9 12345
&gt; screen -wipe
</code></pre>
<h3 id="重启-docker-desktop">重启 Docker Desktop</h3>
<p>手动在状态栏上点击 <code>Restart</code> 进行重启<br>
<img src="https://www.xihrni.com/post-images/1591079475440.png" alt="" loading="lazy"></p>
<p>最后重启容器</p>
<pre><code class="language-shell">&gt; docker start btPanel
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 使用秘钥免密 SSH 远程登录]]></title>
        <id>https://www.xihrni.com/post/centos-shi-yong-mi-yao-mian-mi-ssh-yuan-cheng-deng-lu/</id>
        <link href="https://www.xihrni.com/post/centos-shi-yong-mi-yao-mian-mi-ssh-yuan-cheng-deng-lu/">
        </link>
        <updated>2019-11-26T06:45:02.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="生成-ssh-key">😳生成 SSH Key</h3>
<blockquote>
<p><code>~</code> 代表当前用户目录，比如 root 用户则为 <code>/root</code></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="生成-ssh-key">😳生成 SSH Key</h3>
<blockquote>
<p><code>~</code> 代表当前用户目录，比如 root 用户则为 <code>/root</code></p>
</blockquote>
<!-- more -->
<p>检查当前是否已存在 <code>ssh key</code></p>
<pre><code class="language-shell">&gt; cat ~/.ssh/id_rsa
</code></pre>
<p>生成 <code>ssh key</code> （已存在则无需生成）</p>
<pre><code class="language-shell">&gt; ssh-keygen -t rsa -C &quot;xieyucheng@dyg.cn&quot;
</code></pre>
<p><code>id_rsa</code> 为秘钥文件，<code>id_rsa.pub</code> 为公钥文件</p>
<p>查看公钥文件</p>
<pre><code class="language-shell">&gt; cat ~/.ssh/id_rsa.pub
</code></pre>
<blockquote>
<p>注：本地与远程都需生成SSh Key</p>
</blockquote>
<h3 id="本地公钥加入到远程服务器授权文件中">本地公钥加入到远程服务器授权文件中</h3>
<p><strong>远程服务器</strong>检查当前是否已存在 <code>authorized_keys</code> 文件</p>
<pre><code class="language-shell">&gt; cat ~/.ssh/authorized_keys
</code></pre>
<p>创建 <code>authorized_keys</code> 文件并修改权限（已存在则无需创建）</p>
<pre><code class="language-shell">&gt; touch ~/.ssh/authorized_keys
&gt; chmod 600 ~/.ssh/authorized_keys
</code></pre>
<p>拷贝<strong>本地</strong> <code>id_rsa.pub</code> 公钥文件中所有内容到<strong>远程服务器</strong></p>
<pre><code class="language-shell">&gt; vi ~/.ssh/G-AA00468.pub # 创建一个以本地主机名称命名的临时文件
</code></pre>
<p>输入 <code>i</code> 进入编辑状态，粘贴，输入 <code>:wq</code> 保存文件并退出</p>
<pre><code class="language-shell">&gt; cat ~/.ssh/G-AA00468.pub &gt;&gt; ~/.ssh/authorized_keys # 追加到 `authorized_keys` 文件
</code></pre>
<h3 id="配置远程服务器ssh服务">配置远程服务器SSH服务</h3>
<p>编辑 <code>ssh</code> 配置</p>
<pre><code class="language-shell">&gt; vi /etc/ssh/sshd_config
</code></pre>
<p>输入 <code>i</code> 进入编辑状态，将下面两个配置修改，输入 <code>:wq</code> 保存文件并退出</p>
<pre><code class="language-shell">PasswordAuthentication no // 禁止使用基于口令认证的方式登陆
PubkeyAuthentication yes // 允许使用基于密钥认证的方式登陆
</code></pre>
<p>重启 <code>ssh</code> 服务</p>
<pre><code class="language-shell">&gt; /etc/init.d/sshd reload # CentOS7系统以下
</code></pre>
<p><strong>或</strong></p>
<pre><code class="language-shell">&gt; systemctl restart sshd.service # CentOS7系统以上
</code></pre>
<h3 id="使用秘钥免密登录">使用秘钥免密登录</h3>
<pre><code class="language-shell">&gt; ssh -i ~/.ssh/id_rsa root@***.***.***.***
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 重写 crontab -r 命令防止误操作]]></title>
        <id>https://www.xihrni.com/post/centos-chong-xie-crontab-r-ming-ling-fang-zhi-wu-cao-zuo/</id>
        <link href="https://www.xihrni.com/post/centos-chong-xie-crontab-r-ming-ling-fang-zhi-wu-cao-zuo/">
        </link>
        <updated>2019-07-24T07:01:58.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>😳一次误操作将服务器上的所有定时任务清除导致项目故障</p>
</blockquote>
<h3 id="别名">别名</h3>
<p>设置别名重写 <code>crontab</code> 命令</p>
<pre><code class="language-shell">&gt; vi /etc/bashrc
</code></pre>
<p>输入 <code>i</code> 进入编辑模式，新增一行</p>
<pre><code class="language-shell">alias crontab='/usr/bin/crontab.sh'
</code></pre>
<p>输入 <code>:wq</code> 保存并退出</p>
<h3 id="命令文件">命令文件</h3>
<p>编辑文件</p>
<pre><code class="language-shell">&gt; vi crontab.sh
</code></pre>
<p>输入 <code>i</code> 进入编辑模式，输入以下代码</p>
<pre><code class="language-shell">#!/bin/sh
source /etc/profile;
source ~/.bash_profile;

etime=`date -d &quot;0 days ago&quot; +%Y%m%d_%H%M%S`

if [ &quot;$1&quot; = &quot;-r&quot; ] ; then
    echo &quot;My God! Dangerous...&quot;
    echo &quot;Exit...&quot;
    exit 2
fi

if [ &quot;$1&quot; = &quot;-l&quot; ] ; then
    /usr/bin/crontab -l
    exit 0
fi

# 编辑时进行备份
if [ &quot;$1&quot; = &quot;-e&quot; ] ; then
    mkdir -p  ~/cronbak
    /usr/bin/crontab -l  &gt;  ~/cronbak/cron.bak.$etime.a
    /usr/bin/crontab -e
    /usr/bin/crontab -l  &gt;  ~/cronbak/cron.bak.$etime.b
f
</code></pre>
<p>移动文件并添加权限</p>
<pre><code class="language-shell">&gt; mv crontab.sh /usr/bin
&gt; chmod 755 /usr/bin/crontab.sh
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 安装 Composer 并配置环境]]></title>
        <id>https://www.xihrni.com/post/centos-an-zhuang-composer-bing-pei-zhi-huan-jing/</id>
        <link href="https://www.xihrni.com/post/centos-an-zhuang-composer-bing-pei-zhi-huan-jing/">
        </link>
        <updated>2019-07-23T07:07:27.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="php-cli">😳PHP CLI</h3>
<p>首先检测 PHP CLI 版本，输入命令</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="php-cli">😳PHP CLI</h3>
<p>首先检测 PHP CLI 版本，输入命令</p>
<!-- more -->
<pre><code class="language-shell">&gt; php -v
PHP 5.2.3 (cli) ...
</code></pre>
<p>需要更换 PHP CLI 版本，使用 BT 面板中 <code>7.2</code> 的版本，设置一个别名</p>
<pre><code class="language-shell">&gt; vi ~/.bashrc
</code></pre>
<p>输入 <code>i</code> 进入编辑模式，新增一行</p>
<pre><code class="language-shell">alias php='/www/server/php/72/bin/php'
</code></pre>
<p>输入 <code>:wq</code> 保存并退出</p>
<p>再次执行 <code>php -v</code> 查看版本，输出</p>
<pre><code class="language-shell">PHP 7.2.4 (cli) (built: Nov 12 2018 10:47:44) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
</code></pre>
<p>看到已经是 <code>7.2.4</code> 的版本</p>
<h3 id="composer">Composer</h3>
<p>使用 PHP 下载安装文件</p>
<pre><code class="language-shell">&gt; php -r &quot;copy('https://getcomposer.org/installer', 'composer-setup.php');&quot;
</code></pre>
<p>验证文件是否正确</p>
<pre><code class="language-shell">&gt; php -r &quot;if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;&quot;
</code></pre>
<p>输出 <code>Installer verified</code> 则为正确，执行安装文件</p>
<pre><code class="language-shell">&gt; php composer-setup.php
</code></pre>
<p>接着删除安装文件</p>
<pre><code class="language-shell">&gt; php -r &quot;unlink('composer-setup.php');&quot;
</code></pre>
<p>移动到全局</p>
<pre><code class="language-shell">&gt; mv composer.phar /usr/local/bin/composer
</code></pre>
<p>中国镜像</p>
<pre><code class="language-shell">&gt; composer config -g repo.packagist composer https://packagist.phpcomposer.com
# 或使用阿里云镜像
&gt; composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/
</code></pre>
<h3 id="composer-命令">Composer 命令</h3>
<p>安装/更新项目依赖</p>
<pre><code class="language-shell">&gt; cd '你的项目地址'
&gt; composer install
# 或
&gt; composer update
</code></pre>
<p>如果报错</p>
<pre><code class="language-shell">&gt; Unsupported declare 'strict_types' ...
</code></pre>
<p>PHP版本错误，原因是因为直接使用 composer 命令应该调用到了老版本的 PHP CLI，添加一个别名即可</p>
<pre><code class="language-shell">&gt; vi ~/.bashrc
</code></pre>
<p>输入 <code>i</code> 进入编辑模式，新增一行</p>
<pre><code class="language-shell">&gt; alias composer='php /usr/local/bin/composer'
</code></pre>
<p>输入 <code>:wq</code> 保存并退出</p>
<blockquote>
<p>重新登录 SSH 即可生效 <code>.bashrc</code> 文件<br>
😬</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Yii2 将 CSV 文件导入到数据库]]></title>
        <id>https://www.xihrni.com/post/yii2-jiang-csv-wen-jian-dao-ru-dao-shu-ju-ku/</id>
        <link href="https://www.xihrni.com/post/yii2-jiang-csv-wen-jian-dao-ru-dao-shu-ju-ku/">
        </link>
        <updated>2019-06-20T07:14:51.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="代码">😳代码</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="代码">😳代码</h3>
<!-- more -->
<pre><code class="language-php">$file = fopen(Yii::getAlias('@webroot') . '/region-code.csv', 'r');

while ($data = fgetcsv($file)) {
    $rows[] = [
        'name' =&gt; trim($data[1]),
        'code' =&gt; trim($data[0]),
    ];
}

fclose($file);

$result = Yii::$app-&gt;db-&gt;createCommand()
    -&gt;batchInsert(\app\models\RegionCode::tableName(), ['name', 'code'], $rows)
    -&gt;execute();

var_dump($result);exit;
</code></pre>
<p>😬</p>
]]></content>
    </entry>
</feed>