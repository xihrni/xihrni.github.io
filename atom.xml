<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.xihrni.com</id>
    <title>我的世界</title>
    <updated>2020-06-02T07:18:01.537Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.xihrni.com"/>
    <link rel="self" href="https://www.xihrni.com/atom.xml"/>
    <subtitle>只有自身强大</subtitle>
    <logo>https://www.xihrni.com/images/avatar.png</logo>
    <icon>https://www.xihrni.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 我的世界</rights>
    <entry>
        <title type="html"><![CDATA[Git 从远程拉取数据时提示：'You have not concluded your merge (MERGE_HEAD exists).' 解决方法]]></title>
        <id>https://www.xihrni.com/post/git-cong-yuan-cheng-la-qu-shu-ju-shi-ti-shi-you-have-not-concluded-your-merge-merge_head-exists/</id>
        <link href="https://www.xihrni.com/post/git-cong-yuan-cheng-la-qu-shu-ju-shi-ti-shi-you-have-not-concluded-your-merge-merge_head-exists/">
        </link>
        <updated>2020-06-02T03:07:51.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="当前状态">😳当前状态</h3>
<p>有些代码未加到忽略文件然后系统运行中被修改之后如果未处理进行拉取，在操作的过程中可能出现了如下状态</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="当前状态">😳当前状态</h3>
<p>有些代码未加到忽略文件然后系统运行中被修改之后如果未处理进行拉取，在操作的过程中可能出现了如下状态</p>
<!-- more -->
<pre><code class="language-shell">&gt; git status
# On branch develop
# Your branch and 'origin/develop' have diverged,
# and have 9 and 7 different commits each, respectively.
#   (use &quot;git pull&quot; to merge the remote branch into yours)
#
# All conflicts fixed but you are still merging.
#   (use &quot;git commit&quot; to conclude merge)
#
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   config/site_config.php
#       modified:   sitemap_article.xml
#       modified:   sitemap_goods.xml
#       modified:   sitemaps.xml
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>这个时候可以先备份修改过的文件，然后重置到修改之前的状态再拉取试试</p>
<pre><code class="language-shell">&gt; git checkout -- config/site_config.php
&gt; git checkout -- sitemap_article.xml
&gt; git checkout -- sitemap_goods.xml
&gt; git checkout -- sitemap.xml
&gt; git pull
</code></pre>
<p>如果提示以下信息则需要使用强制合并进行操作</p>
<pre><code class="language-shell">&gt; git pull
You have not concluded your merge (MERGE_HEAD exists).
Please, commit your changes before you can merge.
</code></pre>
<h3 id="强制合并">强制合并</h3>
<blockquote>
<p>强制合并会覆盖本地版本，请先备份相关文件</p>
</blockquote>
<pre><code class="language-shell">&gt; git fetch --all
&gt; git reset --hard origin/master
&gt; git fetch
</code></pre>
<p>再进行拉取则没有问题了</p>
<pre><code class="language-shell">&gt; git pull
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Borderlands 2 设置为繁体中文（Epic Games 平台）]]></title>
        <id>https://www.xihrni.com/post/borderlands-2-she-zhi-wei-fan-ti-zhong-wen-epic-games-ping-tai/</id>
        <link href="https://www.xihrni.com/post/borderlands-2-she-zhi-wei-fan-ti-zhong-wen-epic-games-ping-tai/">
        </link>
        <updated>2020-06-02T00:24:01.000Z</updated>
        <summary type="html"><![CDATA[<p>😳打开 Epic Games 平台先安装好游戏后进入设置界面</p>
]]></summary>
        <content type="html"><![CDATA[<p>😳打开 Epic Games 平台先安装好游戏后进入设置界面</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://www.xihrni.com/post-images/1591057609359.png" alt="Epic Games 平台设置界面" loading="lazy"></figure>
<p>滑动到最下方的管理游戏，展开 BORDERLANDS 2，勾选 <code>额外命令行参数</code> 后在输入框粘贴此字符： <code>-epiclocale=zh-Hant</code><br>
<img src="https://www.xihrni.com/post-images/1591057832534.png" alt="Epic Games 平台设置界面" loading="lazy"></p>
<p>返回到游戏库启动即可</p>
<p>启动界面还是英文不用理他，点 <code>PLAY</code> 进入游戏后就是繁体中文了<br>
<img src="https://www.xihrni.com/post-images/1591058065557.png" alt="游戏启动界面" loading="lazy"><br>
<img src="https://www.xihrni.com/post-images/1591058184453.png" alt="游戏菜单界面" loading="lazy"><br>
😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于 PHP 连接本地 localhost 上的 Redis 特别慢的处理记录]]></title>
        <id>https://www.xihrni.com/post/guan-yu-php-lian-jie-localhost-shang-de-redis-te-bie-man-de-chu-li-ji-lu/</id>
        <link href="https://www.xihrni.com/post/guan-yu-php-lian-jie-localhost-shang-de-redis-te-bie-man-de-chu-li-ji-lu/">
        </link>
        <updated>2020-05-28T05:43:58.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>😳 本地的 Yii2 项目配置 Redis 缓存后接口速度非常慢，检查了一下后发现每次都是在连接 Redis 的时候耗时最长，一开始还以为是 Yii2 框架的扩展问题，后来用 php-cli 执行单个文件也会出现太慢的情况。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>😳 本地的 Yii2 项目配置 Redis 缓存后接口速度非常慢，检查了一下后发现每次都是在连接 Redis 的时候耗时最长，一开始还以为是 Yii2 框架的扩展问题，后来用 php-cli 执行单个文件也会出现太慢的情况。</p>
</blockquote>
<!-- more -->
<h3 id="连接-redis">连接 Redis</h3>
<p>PHP 连接 Redis 代码：</p>
<pre><code class="language-php">&lt;?php // redis.php
echo time() . &quot;\r\n&quot;;
$redis = new Redis();
$redis-&gt;connect('localhost', 6379);
echo 'Server is running: ' . $redis-&gt;ping() . &quot;\r\n&quot;;
echo time() . &quot;\r\n&quot;;
</code></pre>
<p>使用 php-cli 执行，发现时间相差2秒：</p>
<pre><code class="language-shell">PS &gt; php -f redis.php
1590629905
Server is running: +PONG
1590629907
</code></pre>
<p>但是将连接地址换成 <code>127.0.0.1</code> 之后却正常：</p>
<pre><code class="language-shell">PS &gt; php -f redis.php
1590629918
Server is running: +PONG
1590629918
</code></pre>
<h3 id="问题原因">问题原因</h3>
<p>上网查了些资料后发现 Windows 从 Win7 以后优先使用 IPv6 的协议，使 <code>localhost</code> 走了 IPv6 协议：</p>
<pre><code class="language-shell">PS &gt; hostname
G-AA00604

PS &gt; ping G-AA00604

正在 Ping G-AA00604 [fe80::5cd6:59d3:ad04:b26f%14] 具有 32 字节的数据:
来自 fe80::5cd6:59d3:ad04:b26f%14 的回复: 字节=32 时间&lt;1ms TTL=128
来自 fe80::5cd6:59d3:ad04:b26f%14 的回复: 字节=32 时间&lt;1ms TTL=128
来自 fe80::5cd6:59d3:ad04:b26f%14 的回复: 字节=32 时间&lt;1ms TTL=128
来自 fe80::5cd6:59d3:ad04:b26f%14 的回复: 字节=32 时间&lt;1ms TTL=128

fe80::5cd6:59d3:ad04:b26f%14 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 0ms，最长 = 0ms，平均 = 0ms
</code></pre>
<p>从上面的 <code>ping</code> 命令请求自己本机的主机名称，可以看到返回的是 IPv6 的地址类型，我们再来看一下网络接口的优先级：</p>
<pre><code class="language-shell">PS &gt; netsh interface ipv6 show prefixpolicies
查询活动状态...

优先顺序    标签   前缀
----------  -----  --------------------------------
        50      0  ::1/128
        40      1  ::/0
        35      4  ::ffff:0:0/96
        30      2  2002::/16
        5       5  2001::/32
        3       13  fc00::/7
        1       11  fec0::/10
        1       12  3ffe::/16
        1       3  ::/96

</code></pre>
<p>可以看到  IPv6 的地址类型在最上面，而 IPv4 的地址类型在最下面</p>
<h3 id="解决办法">解决办法</h3>
<p>既然 IPv4 的优先级较低，那么我们就改变一下优先级（使用管理员权限）</p>
<pre><code class="language-shell">PS &gt; netsh int ipv6 set prefix ::/96 50 0
确定。

PS &gt; netsh int ipv6 set prefix ::ffff:0:0/96 40 1
确定。

PS &gt; netsh int ipv6 set prefix 2002::/16 35 2
确定。

PS &gt; netsh int ipv6 set prefix 2001::/32 30 3
确定。

PS &gt; netsh int ipv6 set prefix ::1/128 10 4
确定。

PS &gt; netsh int ipv6 set prefix ::/0 5 5
确定。

PS &gt; netsh int ipv6 set prefix fc00::/7 3 13
确定。

PS &gt; netsh int ipv6 set prefix fec0::/10 1 11
确定。

PS &gt; netsh int ipv6 set prefix 3ffe::/16 1 12
确定。

</code></pre>
<p>改完之后我们再看一下网络接口的优先级：</p>
<pre><code class="language-shell">PS &gt; netsh interface ipv6 show prefixpolicies
查询活动状态...

优先顺序    标签   前缀
----------  -----  --------------------------------
        50      0  ::/96
        40      1  ::ffff:0:0/96
        35      2  2002::/16
        30      3  2001::/32
        10      4  ::1/128
         5      5  ::/0
         3     13  fc00::/7
         1     12  3ffe::/16
         1     11  fec0::/10

</code></pre>
<p>看到 IPv4 的优先级已经在最上方了，那我们再 <code>ping</code> 一下：</p>
<pre><code class="language-shell">PS &gt; ping G-AA00604

正在 Ping G-AA00604 [192.168.56.1] 具有 32 字节的数据:
来自 192.168.56.1 的回复: 字节=32 时间&lt;1ms TTL=128
来自 192.168.56.1 的回复: 字节=32 时间&lt;1ms TTL=128
来自 192.168.56.1 的回复: 字节=32 时间&lt;1ms TTL=128
来自 192.168.56.1 的回复: 字节=32 时间&lt;1ms TTL=128

192.168.56.1 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 0ms，最长 = 0ms，平均 = 0ms
</code></pre>
<p>可以看到已经反回了 IPv4 的地址类型，再试试连接 <code>localhost</code> 的 Redis：</p>
<pre><code class="language-shell">PS &gt; php -f redis.php
1590630198
Server is running: +PONG
1590630198
</code></pre>
<p>到此，已经解决了连接 <code>localhost</code> 慢的问题，其他应用也可使用此方式解决，比如：MySQL、MemCacahe 等<br>
😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacOS 已运行的 Docker 容器添加/修改端口映射]]></title>
        <id>https://www.xihrni.com/post/macos-yi-yun-xing-de-docker-rong-qi-tian-jia-xiu-gai-duan-kou-ying-she/</id>
        <link href="https://www.xihrni.com/post/macos-yi-yun-xing-de-docker-rong-qi-tian-jia-xiu-gai-duan-kou-ying-she/">
        </link>
        <updated>2020-01-01T06:24:35.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>😳当前容器名称为 <code>btPanel</code>，需要添加 <code>3306</code> 端口</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>😳当前容器名称为 <code>btPanel</code>，需要添加 <code>3306</code> 端口</p>
</blockquote>
<!-- more -->
<h3 id="确认已映射端口">确认已映射端口</h3>
<pre><code class="language-shell"># name or container id
&gt; docker port btPanel
</code></pre>
<h3 id="确认容器id">确认容器ID</h3>
<pre><code class="language-shell">&gt; docker container inspect btPanel
</code></pre>
<h3 id="停止容器">停止容器</h3>
<pre><code class="language-shell">&gt; docker stop btPanel
</code></pre>
<h3 id="登录到容器">登录到容器</h3>
<pre><code class="language-shell">&gt; screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty
</code></pre>
<h3 id="修改配置文件">修改配置文件</h3>
<p>先进入容器ID的目录</p>
<pre><code class="language-shell">&gt; cd /var/lib/docker/containers/&lt;containerId&gt;
</code></pre>
<p>修改 <code>config.v2.json</code> 文件</p>
<blockquote>
<p>被压缩的 json 格式，可复制出来用编辑器修改</p>
</blockquote>
<pre><code class="language-shell">&gt; vi config.v2.json
</code></pre>
<p>shell<br>
按照原有格式修改或新增 <code>Config.ExposedPorts</code> 块</p>
<pre><code class="language-json">{
    &quot;80/tcp&quot;: {},
    &quot;888/tcp&quot;: {},
    &quot;3306/tcp&quot;: {}
}
</code></pre>
<p>修改完后保存退出</p>
<pre><code class="language-shell">:wq
</code></pre>
<p>修改 <code>hostconfig.json</code> 文件</p>
<blockquote>
<p>被压缩的 json 格式，可复制出来用编辑器修改</p>
</blockquote>
<pre><code class="language-shell">&gt; vi config.v2.json
</code></pre>
<p>按照原有格式修改或新增 <code>PortBindings</code> 块</p>
<pre><code class="language-json">{
    &quot;80/tcp&quot;: [
        {
            &quot;HostIp&quot;: &quot;&quot;,
            &quot;HostPort&quot;: &quot;80&quot;
        }
    ],
    &quot;888/tcp&quot;: [
        {
            &quot;HostIp&quot;: &quot;&quot;,
            &quot;HostPort&quot;: &quot;888&quot;
        }
    ],
    &quot;3306/tcp&quot;: [
        {
            &quot;HostIp&quot;: &quot;&quot;,
            &quot;HostPort&quot;: &quot;3306&quot;
        }
    ]
}
</code></pre>
<p>修改完后保存退出</p>
<pre><code class="language-shell">:wq
</code></pre>
<blockquote>
<p>vi 命令模式下，<code>dd</code> 是删除当前行，<code>dG</code> 是删除当前行后面的内容</p>
</blockquote>
<h3 id="退出容器">退出容器</h3>
<p>按下 <code>Ctrl</code> + <code>A</code>，再快速按 <code>D</code>，退出 <code>screen</code></p>
<h3 id="会话">会话</h3>
<p>查看当前会话</p>
<pre><code class="language-shell">&gt; screen -ls
</code></pre>
<p>杀死会话并退出</p>
<pre><code class="language-shell">&gt; kill -9 12345
&gt; screen -wipe
</code></pre>
<h3 id="重启-docker-desktop">重启 Docker Desktop</h3>
<p>手动在状态栏上点击 <code>Restart</code> 进行重启<br>
<img src="https://www.xihrni.com/post-images/1591079475440.png" alt="" loading="lazy"></p>
<p>最后重启容器</p>
<pre><code class="language-shell">&gt; docker start btPanel
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 使用秘钥免密 SSH 远程登录]]></title>
        <id>https://www.xihrni.com/post/centos-shi-yong-mi-yao-mian-mi-ssh-yuan-cheng-deng-lu/</id>
        <link href="https://www.xihrni.com/post/centos-shi-yong-mi-yao-mian-mi-ssh-yuan-cheng-deng-lu/">
        </link>
        <updated>2019-11-26T06:45:02.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="生成-ssh-key">😳生成 SSH Key</h3>
<blockquote>
<p><code>~</code> 代表当前用户目录，比如 root 用户则为 <code>/root</code></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="生成-ssh-key">😳生成 SSH Key</h3>
<blockquote>
<p><code>~</code> 代表当前用户目录，比如 root 用户则为 <code>/root</code></p>
</blockquote>
<!-- more -->
<p>检查当前是否已存在 <code>ssh key</code></p>
<pre><code class="language-shell">&gt; cat ~/.ssh/id_rsa
</code></pre>
<p>生成 <code>ssh key</code> （已存在则无需生成）</p>
<pre><code class="language-shell">&gt; ssh-keygen -t rsa -C &quot;xieyucheng@dyg.cn&quot;
</code></pre>
<p><code>id_rsa</code> 为秘钥文件，<code>id_rsa.pub</code> 为公钥文件</p>
<p>查看公钥文件</p>
<pre><code class="language-shell">&gt; cat ~/.ssh/id_rsa.pub
</code></pre>
<blockquote>
<p>注：本地与远程都需生成SSh Key</p>
</blockquote>
<h3 id="本地公钥加入到远程服务器授权文件中">本地公钥加入到远程服务器授权文件中</h3>
<p><strong>远程服务器</strong>检查当前是否已存在 <code>authorized_keys</code> 文件</p>
<pre><code class="language-shell">&gt; cat ~/.ssh/authorized_keys
</code></pre>
<p>创建 <code>authorized_keys</code> 文件并修改权限（已存在则无需创建）</p>
<pre><code class="language-shell">&gt; touch ~/.ssh/authorized_keys
&gt; chmod 600 ~/.ssh/authorized_keys
</code></pre>
<p>拷贝<strong>本地</strong> <code>id_rsa.pub</code> 公钥文件中所有内容到<strong>远程服务器</strong></p>
<pre><code class="language-shell">&gt; vi ~/.ssh/G-AA00468.pub # 创建一个以本地主机名称命名的临时文件
</code></pre>
<p>输入 <code>i</code> 进入编辑状态，粘贴，输入 <code>:wq</code> 保存文件并退出</p>
<pre><code class="language-shell">&gt; cat ~/.ssh/G-AA00468.pub &gt;&gt; ~/.ssh/authorized_keys # 追加到 `authorized_keys` 文件
</code></pre>
<h3 id="配置远程服务器ssh服务">配置远程服务器SSH服务</h3>
<p>编辑 <code>ssh</code> 配置</p>
<pre><code class="language-shell">&gt; vi /etc/ssh/sshd_config
</code></pre>
<p>输入 <code>i</code> 进入编辑状态，将下面两个配置修改，输入 <code>:wq</code> 保存文件并退出</p>
<pre><code class="language-shell">PasswordAuthentication no // 禁止使用基于口令认证的方式登陆
PubkeyAuthentication yes // 允许使用基于密钥认证的方式登陆
</code></pre>
<p>重启 <code>ssh</code> 服务</p>
<pre><code class="language-shell">&gt; /etc/init.d/sshd reload # CentOS7系统以下
</code></pre>
<p><strong>或</strong></p>
<pre><code class="language-shell">&gt; systemctl restart sshd.service # CentOS7系统以上
</code></pre>
<h3 id="使用秘钥免密登录">使用秘钥免密登录</h3>
<pre><code class="language-shell">&gt; ssh -i ~/.ssh/id_rsa root@***.***.***.***
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 重写 crontab -r 命令防止误操作]]></title>
        <id>https://www.xihrni.com/post/centos-chong-xie-crontab-r-ming-ling-fang-zhi-wu-cao-zuo/</id>
        <link href="https://www.xihrni.com/post/centos-chong-xie-crontab-r-ming-ling-fang-zhi-wu-cao-zuo/">
        </link>
        <updated>2019-07-24T07:01:58.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>😳一次误操作将服务器上的所有定时任务清除导致项目故障</p>
</blockquote>
<h3 id="别名">别名</h3>
<p>设置别名重写 <code>crontab</code> 命令</p>
<pre><code class="language-shell">&gt; vi /etc/bashrc
</code></pre>
<p>输入 <code>i</code> 进入编辑模式，新增一行</p>
<pre><code class="language-shell">alias crontab='/usr/bin/crontab.sh'
</code></pre>
<p>输入 <code>:wq</code> 保存并退出</p>
<h3 id="命令文件">命令文件</h3>
<p>编辑文件</p>
<pre><code class="language-shell">&gt; vi crontab.sh
</code></pre>
<p>输入 <code>i</code> 进入编辑模式，输入以下代码</p>
<pre><code class="language-shell">#!/bin/sh
source /etc/profile;
source ~/.bash_profile;

etime=`date -d &quot;0 days ago&quot; +%Y%m%d_%H%M%S`

if [ &quot;$1&quot; = &quot;-r&quot; ] ; then
    echo &quot;My God! Dangerous...&quot;
    echo &quot;Exit...&quot;
    exit 2
fi

if [ &quot;$1&quot; = &quot;-l&quot; ] ; then
    /usr/bin/crontab -l
    exit 0
fi

# 编辑时进行备份
if [ &quot;$1&quot; = &quot;-e&quot; ] ; then
    mkdir -p  ~/cronbak
    /usr/bin/crontab -l  &gt;  ~/cronbak/cron.bak.$etime.a
    /usr/bin/crontab -e
    /usr/bin/crontab -l  &gt;  ~/cronbak/cron.bak.$etime.b
f
</code></pre>
<p>移动文件并添加权限</p>
<pre><code class="language-shell">&gt; mv crontab.sh /usr/bin
&gt; chmod 755 /usr/bin/crontab.sh
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 安装 Composer 并配置环境]]></title>
        <id>https://www.xihrni.com/post/centos-an-zhuang-composer-bing-pei-zhi-huan-jing/</id>
        <link href="https://www.xihrni.com/post/centos-an-zhuang-composer-bing-pei-zhi-huan-jing/">
        </link>
        <updated>2019-07-23T07:07:27.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="php-cli">😳PHP CLI</h3>
<p>首先检测 PHP CLI 版本，输入命令</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="php-cli">😳PHP CLI</h3>
<p>首先检测 PHP CLI 版本，输入命令</p>
<!-- more -->
<pre><code class="language-shell">&gt; php -v
PHP 5.2.3 (cli) ...
</code></pre>
<p>需要更换 PHP CLI 版本，使用 BT 面板中 <code>7.2</code> 的版本，设置一个别名</p>
<pre><code class="language-shell">&gt; vi ~/.bashrc
</code></pre>
<p>输入 <code>i</code> 进入编辑模式，新增一行</p>
<pre><code class="language-shell">alias php='/www/server/php/72/bin/php'
</code></pre>
<p>输入 <code>:wq</code> 保存并退出</p>
<p>再次执行 <code>php -v</code> 查看版本，输出</p>
<pre><code class="language-shell">PHP 7.2.4 (cli) (built: Nov 12 2018 10:47:44) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
</code></pre>
<p>看到已经是 <code>7.2.4</code> 的版本</p>
<h3 id="composer">Composer</h3>
<p>使用 PHP 下载安装文件</p>
<pre><code class="language-shell">&gt; php -r &quot;copy('https://getcomposer.org/installer', 'composer-setup.php');&quot;
</code></pre>
<p>验证文件是否正确</p>
<pre><code class="language-shell">&gt; php -r &quot;if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;&quot;
</code></pre>
<p>输出 <code>Installer verified</code> 则为正确，执行安装文件</p>
<pre><code class="language-shell">&gt; php composer-setup.php
</code></pre>
<p>接着删除安装文件</p>
<pre><code class="language-shell">&gt; php -r &quot;unlink('composer-setup.php');&quot;
</code></pre>
<p>移动到全局</p>
<pre><code class="language-shell">&gt; mv composer.phar /usr/local/bin/composer
</code></pre>
<p>中国镜像</p>
<pre><code class="language-shell">&gt; composer config -g repo.packagist composer https://packagist.phpcomposer.com
# 或使用阿里云镜像
&gt; composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/
</code></pre>
<h3 id="composer-命令">Composer 命令</h3>
<p>安装/更新项目依赖</p>
<pre><code class="language-shell">&gt; cd '你的项目地址'
&gt; composer install
# 或
&gt; composer update
</code></pre>
<p>如果报错</p>
<pre><code class="language-shell">&gt; Unsupported declare 'strict_types' ...
</code></pre>
<p>PHP版本错误，原因是因为直接使用 composer 命令应该调用到了老版本的 PHP CLI，添加一个别名即可</p>
<pre><code class="language-shell">&gt; vi ~/.bashrc
</code></pre>
<p>输入 <code>i</code> 进入编辑模式，新增一行</p>
<pre><code class="language-shell">&gt; alias composer='php /usr/local/bin/composer'
</code></pre>
<p>输入 <code>:wq</code> 保存并退出</p>
<blockquote>
<p>重新登录 SSH 即可生效 <code>.bashrc</code> 文件<br>
😬</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Yii2 将 CSV 文件导入到数据库]]></title>
        <id>https://www.xihrni.com/post/yii2-jiang-csv-wen-jian-dao-ru-dao-shu-ju-ku/</id>
        <link href="https://www.xihrni.com/post/yii2-jiang-csv-wen-jian-dao-ru-dao-shu-ju-ku/">
        </link>
        <updated>2019-06-20T07:14:51.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="代码">😳代码</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="代码">😳代码</h3>
<!-- more -->
<pre><code class="language-php">$file = fopen(Yii::getAlias('@webroot') . '/region-code.csv', 'r');

while ($data = fgetcsv($file)) {
    $rows[] = [
        'name' =&gt; trim($data[1]),
        'code' =&gt; trim($data[0]),
    ];
}

fclose($file);

$result = Yii::$app-&gt;db-&gt;createCommand()
    -&gt;batchInsert(\app\models\RegionCode::tableName(), ['name', 'code'], $rows)
    -&gt;execute();

var_dump($result);exit;
</code></pre>
<p>😬</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 版本控制常用命令]]></title>
        <id>https://www.xihrni.com/post/git-ban-ben-kong-zhi-chang-yong-ming-ling/</id>
        <link href="https://www.xihrni.com/post/git-ban-ben-kong-zhi-chang-yong-ming-ling/">
        </link>
        <updated>2018-08-18T06:32:46.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="准备">😳准备</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="准备">😳准备</h2>
<!-- more -->
<h3 id="帮助">帮助</h3>
<p>查看帮助</p>
<pre><code class="language-shell">git help
</code></pre>
<p>查看所有命令</p>
<pre><code class="language-shell">git help -a
</code></pre>
<p>查看使用手册</p>
<pre><code class="language-shell">git help -g
</code></pre>
<p>查看单个命令</p>
<blockquote>
<p>使用 <code>F</code> 键向下翻页，使用 <code>B</code> 键向上翻页，使用 <code>Q</code> 键退出</p>
</blockquote>
<pre><code class="language-shell">git help add
</code></pre>
<h3 id="配置">配置</h3>
<blockquote>
<p>配置分为系统范围、用户范围、项目范围，<code>--global</code> 为用户范围</p>
</blockquote>
<p>查看配置</p>
<pre><code class="language-shell">git config --list
</code></pre>
<p>配置用户</p>
<pre><code class="language-shell">git config --global user.email 'xihrni@126.com'
git config --global user.name 'xihrni'
</code></pre>
<p>配置颜色</p>
<pre><code class="language-shell">git config --global color.ui true
</code></pre>
<p>配置忽略文件权限</p>
<pre><code class="language-shell">git config core.filemode false
</code></pre>
<p>配置文件</p>
<pre><code class="language-shell">cat ~/.gitconfig
</code></pre>
<h3 id="别名">别名</h3>
<p>新增别名</p>
<pre><code class="language-shell">git config --global alias.co checkout
</code></pre>
<p>Mac OS 设定别名</p>
<pre><code class="language-shell">vim ~/.bash_profile

# 新增一行
alias gco='git checkout'

# 保存退出
:wq

# 立即生效
source ~/.bash_profile
</code></pre>
<h3 id="忽略跟踪文件">忽略跟踪文件</h3>
<p>配置全局忽略文件</p>
<pre><code class="language-shell">git config --global core.excludesfile ~/.gitignore_global
</code></pre>
<p>编辑配置文件</p>
<pre><code class="language-shell">vim ~/.gitignore_global

# 新增忽略文件
.DS_Store

# 保存退出
:wq
</code></pre>
<p>配置项目忽略文件</p>
<pre><code class="language-shell">vim .gitignore

# 新增一行
*.log

# 保存退出
:wq
</code></pre>
<p>将 <code>.gitignore</code> 文件提交到到版本库即可</p>
<h3 id="忽略本地文件">忽略本地文件</h3>
<p>忽略</p>
<pre><code class="language-shell">git update-index --skip-worktree &lt;file&gt;
</code></pre>
<p>拉取时文件冲突需还原忽略</p>
<pre><code class="language-shell">git update-index --no-skip-worktree &lt;file&gt;
</code></pre>
<h2 id="基础">基础</h2>
<h3 id="初始化">初始化</h3>
<p>创建目录并进入</p>
<pre><code class="language-shell">mkdir git &amp;&amp; cd git
</code></pre>
<p>初始化 git</p>
<pre><code class="language-shell">git init
</code></pre>
<h3 id="提交">提交</h3>
<p>创建 <code>README</code> 文件</p>
<pre><code class="language-shell">echo `# git demo` &gt;&gt; README.md
</code></pre>
<p>查看状态</p>
<pre><code class="language-shell">git status
</code></pre>
<p>将修改文件添加到暂存（stage）区</p>
<blockquote>
<p>将保持文件追踪，git 不追踪文件夹</p>
</blockquote>
<pre><code class="language-shell">git add README.md
</code></pre>
<p>将暂存区提交到本地版本库</p>
<pre><code class="language-shell">git commit -m 'git init'
</code></pre>
<p>或</p>
<blockquote>
<p>将修改文件添加到暂存（stage）区并提交到本地版本库</p>
</blockquote>
<pre><code class="language-shell">git commit -am 'git init'
</code></pre>
<h3 id="对比">对比</h3>
<p>对比</p>
<pre><code class="language-shell">git diff
</code></pre>
<p>对比文件</p>
<pre><code class="language-shell">git diff index.html
</code></pre>
<p>对比暂存（stage）区</p>
<pre><code class="language-shell">git diff --staged
</code></pre>
<h3 id="重命名">重命名</h3>
<blockquote>
<p>重命名已跟踪的文件</p>
</blockquote>
<p>git 命令之外更改文件名时</p>
<pre><code class="language-shell"># 先删除原文件
git rm style.css

# 添加新文件
git add themes.css
</code></pre>
<p>git 命令重命名</p>
<pre><code class="language-shell">git mv theme.css xihrni-theme.css
</code></pre>
<p>移动文件</p>
<pre><code class="language-shell">git mv xihrni-theme.css css/
</code></pre>
<p>移动目录</p>
<pre><code class="language-shell">git mv css asset/
</code></pre>
<h3 id="删除文件">删除文件</h3>
<blockquote>
<p>删除文件之前，需要确定文件已被跟踪，并且没有将要被提交的修改，如果修改了要删除的文件，需要先添加修改并提交，之后才能删除</p>
</blockquote>
<pre><code class="language-shell">git rm asset/css/xihrni-theme.css
</code></pre>
<p>删除暂存区文件</p>
<pre><code class="language-shell">git rm --cached index.html
</code></pre>
<h3 id="恢复删除文件">恢复删除文件</h3>
<p>恢复到最近一次提交的状态</p>
<blockquote>
<p><code>--</code>表示当前分支</p>
</blockquote>
<pre><code class="language-shell">git checkout HEAD -- index.html
</code></pre>
<p>如果文件删除后进行提交了，可以恢复最近一次提交的上一次提交</p>
<blockquote>
<p><code>^</code> 表示上一次，<code>^^</code> 表示上两次</p>
</blockquote>
<pre><code class="language-shell">git checkout HEAD^ -- index.html
</code></pre>
<p>恢复已有的提交</p>
<blockquote>
<p>可使用 <code>git log --oneline</code> 获取 <code>commit id</code></p>
</blockquote>
<pre><code class="language-shell">git revert &lt;commit id&gt;
</code></pre>
<h3 id="重置提交控制头部指针">重置提交，控制头部指针</h3>
<blockquote>
<p>默认每次提交完成后头部指针都会指向最后的提交<br>
<code>--mixed</code> 默认方式， 这个选项会把暂存区里的东西重置到指定提交的状态，并且会把指针指向这个提交<br>
<code>--soft</code>  这个选项重置提交，不会影响到工作目录还有暂存区里的东西<br>
<code>--hard</code>  这个选项会把工作目录还有暂存区，直接重置到指定的提交状态，也就是将全部状态还原<br>
也就是说 <code>mixed</code> 重置暂存区不重置工作目录，<code>hard</code> 都重置，<code>soft</code> 都不重置</p>
</blockquote>
<pre><code class="language-shell">git reset --mixed &lt;commit id&gt;
</code></pre>
<h3 id="工作进度">工作进度</h3>
<p>保存</p>
<blockquote>
<p>保存后将还恢复到当前版本提交时的修改</p>
</blockquote>
<pre><code class="language-shell">git stash save '修改了 index.html'
</code></pre>
<p>查看</p>
<pre><code class="language-shell">git stash list
</code></pre>
<p>对比</p>
<pre><code class="language-shell">git stash show -p &lt;stash@{0}&gt;
</code></pre>
<p>恢复</p>
<pre><code class="language-shell">git stash apply &lt;stash@{0}&gt;
</code></pre>
<p>删除</p>
<pre><code class="language-shell">git stash drop &lt;stash@{0}&gt;
</code></pre>
<p>恢复并删除</p>
<pre><code class="language-shell">git stash pop &lt;stash@{0}&gt;
</code></pre>
<h3 id="日志">日志</h3>
<blockquote>
<p>--oneline 简单显示<br>
--oneline -5 简单显示最后5行<br>
--decorate 显示分支<br>
--decorate --all 显示所有分支<br>
--author='' 显示某一作者的提交<br>
--grep='' 搜索<br>
--before='' 之前的日期，可输入 <code>2018-01-01</code> 或 <code>1 day</code> 、<code>1 week</code> 等<br>
--after 之后的日志<br>
--graph 图形显示</p>
</blockquote>
<pre><code class="language-shell">git log --oneline
</code></pre>
<h2 id="分支">分支</h2>
<h3 id="分支-2">分支</h3>
<p>当前所在分支</p>
<pre><code class="language-shell">git status
</code></pre>
<p>或</p>
<pre><code class="language-shell">git branch
</code></pre>
<p>新建分支</p>
<pre><code class="language-shell">git branch &lt;branch name&gt;
</code></pre>
<p>切换分支</p>
<pre><code class="language-shell">git checkout &lt;branch name&gt;
</code></pre>
<p>切换远程分支并新建本地分支</p>
<pre><code class="language-shell">git checkout -b develop origin/develop
</code></pre>
<h3 id="对比-2">对比</h3>
<pre><code class="language-shell">git diff master..feature/mobile
</code></pre>
<p>对比某一文件</p>
<pre><code class="language-shell">git diff master..feature/mobile index.html
</code></pre>
<h3 id="合并">合并</h3>
<blockquote>
<p><code>Fast forward</code> 合并，因为没有对当前分支做新的提交</p>
</blockquote>
<p>合并其他分支到当前分支</p>
<pre><code class="language-shell">git merge feature/mobile
</code></pre>
<p>如果当前分支已做新的提交则会打开一个描述文件，修改后保存退出即可</p>
<pre><code class="language-shell">:wq
</code></pre>
<p>出现冲突，解决</p>
<pre><code class="language-shell">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
    ... 当前分支内容
=======
    ... 需要合并的分支内容
&gt;&gt;&gt;&gt;&gt;&gt;&gt; master
</code></pre>
<p>删除不需要的内容后（包含 <code>&lt;&lt;&lt;</code> <code>===</code> <code>&gt;&gt;&gt;</code> 这三行），添加到 git 并提交，提交时不需要 <code>m</code> 参数</p>
<pre><code class="language-shell">git add .
git commit
:wq
</code></pre>
<p>出现冲突，放弃合并</p>
<pre><code class="language-shell">git merge --abort
</code></pre>
<h3 id="重命名与删除">重命名与删除</h3>
<p>重命名</p>
<pre><code class="language-shell">git branch -m &lt;branch name&gt; &lt;new branch name&gt;
</code></pre>
<p>删除</p>
<pre><code class="language-shell">git branch -d &lt;branch name&gt;
</code></pre>
<h2 id="远程">远程</h2>
<h3 id="添加远程版本库">添加远程版本库</h3>
<pre><code class="language-shell">git remote add &lt;name&gt; &lt;url&gt;
git remote add origin git@github.com:xihrni/git_demo.git
</code></pre>
<p>查看远程</p>
<blockquote>
<p>一个是 fetch 远程，用来提取，一个是 push 远程，用来推送</p>
</blockquote>
<pre><code class="language-shell">git remote -v
</code></pre>
<h3 id="移除远程版本库">移除远程版本库</h3>
<pre><code class="language-shell">git remote rm &lt;name&gt;
git remote rm origin
</code></pre>
<h3 id="更新远程分支列表">更新远程分支列表</h3>
<pre><code class="language-shell">git remote update &lt;name&gt; -p
git remote update origin -p
</code></pre>
<h3 id="切换远程分支">切换远程分支</h3>
<pre><code class="language-shell">git checkout -t &lt;remote name&gt;/&lt;branch name&gt;
git checkout -t origin/develop
</code></pre>
<h3 id="拉取远程分支">拉取远程分支</h3>
<pre><code class="language-shell">git pull &lt;remote name&gt; &lt;branch name&gt;
git pull origin master
</code></pre>
<p>如果提示 <code>fatal: refusing to merge unrelated histories</code></p>
<pre><code class="language-shell">git pull origin master --allow-unrelated-histories
</code></pre>
<h3 id="推送远程分支">推送远程分支</h3>
<p>将本地的 <code>master</code> 分支推送到 <code>origin</code> 主机，同时指定 <code>origin</code> 为默认主机</p>
<pre><code class="language-shell">git push -u origin master
</code></pre>
<blockquote>
<p>Branch master set up to track remote branch master form origin<br>
意思就是，master 这个分支会跟踪 origin 上的 master 分支</p>
</blockquote>
<h3 id="查看-删除远程分支">查看、删除远程分支</h3>
<p>查看分支</p>
<pre><code class="language-shell">git branch -a
git branch -r
</code></pre>
<p>删除分支</p>
<pre><code class="language-shell">git push origin --delete &lt;branch name&gt;
</code></pre>
<h3 id="克隆远程版本库">克隆远程版本库</h3>
<pre><code class="language-shell">git clone &lt;url&gt; &lt;dir&gt;
git clone git@github.com:xihrni/git_demo.git git_demo
</code></pre>
<h3 id="提取-合并远程版本库">提取、合并远程版本库</h3>
<p>提取</p>
<pre><code class="language-shell">git fetch
</code></pre>
<p>合并</p>
<pre><code class="language-shell">git merge origin/master
</code></pre>
<p>提取并合并远程版本库</p>
<pre><code class="language-shell">git pull
</code></pre>
<h3 id="密码修改">密码修改</h3>
<h5 id="windows">windows</h5>
<p><code>控制面板</code> -&gt; <code>用户账户</code> -&gt; <code>管理 Windows 凭据</code>，找到相应的地址可进行编辑</p>
<h5 id="mac-os">Mac OS</h5>
<p>TODO</p>
<h3 id="ssh-key">SSH key</h3>
<h5 id="查看当前系统是否有-ssh-key">查看当前系统是否有 SSH key</h5>
<pre><code class="language-shell"> ls -al ~/.ssh
</code></pre>
<p>如果没有出现 <code>id_rsa.pub</code> 文件则需要生成</p>
<h4 id="生成-ssh-key">生成 SSH key</h4>
<pre><code class="language-shell">ssh-keygen -t rsa -b 4096 -C &quot;xihrni@126.com&quot;
</code></pre>
<p>复制 <code>id_rsa.pub</code> 文件里的所有内容到 github 账户里的 <code>SSH keys</code> 里添加</p>
<h2 id="标签">标签</h2>
<h3 id="查看标签">查看标签</h3>
<p>查看所有标签</p>
<pre><code class="language-shell">git tag
</code></pre>
<p>查看某一标签，显示出某一标签最后提交的变化</p>
<pre><code class="language-shell">git show &lt;tag name&gt;
</code></pre>
<h3 id="添加标签">添加标签</h3>
<pre><code class="language-shell">git tag &lt;tag name&gt;
git tag v0.1
</code></pre>
<p>添加注释的标签</p>
<pre><code class="language-shell">git tag -a &lt;tag name&gt; [&lt;commit id&gt;] -m ''
git tag -a v0.1 xxx -m 'init'
</code></pre>
<h3 id="删除标签">删除标签</h3>
<pre><code class="language-shell">git tag -d &lt;tag name&gt;
</code></pre>
<h3 id="切换到标签">切换到标签</h3>
<pre><code class="language-shell">git checkout &lt;tag name&gt;
</code></pre>
<h3 id="推送到远程">推送到远程</h3>
<pre><code class="language-shell">git push --tags
</code></pre>
<h2 id="工作流">工作流</h2>
<h3 id="集中式工作流">集中式工作流</h3>
<p>一个中央远程仓库，一个主分支</p>
<h3 id="功能分支工作流">功能分支工作流</h3>
<p>一个中央远程仓库，一个主分支，多个功能分支</p>
<h3 id="gitflow-工作流">Gitflow 工作流</h3>
<p>一个中央远程仓库，一个主分支，一个开发分支，多个功能分支<br>
😬</p>
]]></content>
    </entry>
</feed>